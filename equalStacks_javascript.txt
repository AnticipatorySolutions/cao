'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(str => str.trim());

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the equalStacks function below.
 */
function equalStacks(h1, h2, h3) {
  function minStackHeight(hArr){
    let max = Infinity;
    for(let i =0; i<hArr.length; i++){
      max = Math.min(max, hArr[i]);
    }
    return max;
  }

  function areAllEqual(hArr){
    let h = hArr[0];
    for(let i =0; i<hArr.length;i++){
      if(h != hArr[i]){
        return false;
      }
    }
    return true;
  }

  let heights = [0,0,0];
  let indexes = [0,0,0];
  let stacks = [h1,h2,h3];
  for(let i =0; i< stacks.length; i++){
    for(let j = 0; j < stacks[i].length; j++){
      heights[i]+= stacks[i][j];
    }
  }
  let minHeight = minStackHeight(heights);
  while(!areAllEqual(heights)){
    for(let k =0; k< stacks.length; k++){
      if(heights[k] > minHeight){
        heights[k] -= stacks[k][indexes[k]++];
        minHeight = Math.min(minHeight, heights[k]);
      }
    }
  }
  return minHeight;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n1N2N3 = readLine().split(' ');

    const n1 = parseInt(n1N2N3[0], 10);

    const n2 = parseInt(n1N2N3[1], 10);

    const n3 = parseInt(n1N2N3[2], 10);

    const h1 = readLine().split(' ').map(h1Temp => parseInt(h1Temp, 10));

    const h2 = readLine().split(' ').map(h2Temp => parseInt(h2Temp, 10));

    const h3 = readLine().split(' ').map(h3Temp => parseInt(h3Temp, 10));

    let result = equalStacks(h1, h2, h3);

    ws.write(result + "\n");

    ws.end();
}
