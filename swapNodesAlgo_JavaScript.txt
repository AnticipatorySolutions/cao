'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(str => str.trim());

    main();
});

function readLine() {
    return inputString[currentLine++];
}

function swapNodes(indexes, queries) {
  function swap(tree, node, t, d, c){
    if(node == -1) return;
    node -= 1;
    if(d % t == 0) {
      let temp = tree[node][0];
      tree[node][0] = tree[node][1];
      tree[node][1] = temp;     
    }
    swap(tree, tree[node][0], t, d+1,c);
    c.push(node+1);
    swap(tree, tree[node][1], t, d+1, c);
  }
  const carry = [];
  let i, len = queries.length;
  for(i = 0; i < len; i += 1) {
    let temp = []
    swap(indexes, 1, queries[i], 1, temp);
    carry.push(temp);
  }
  return carry;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine(), 10);

    let indexes = Array(n);

    for (let indexesRowItr = 0; indexesRowItr < n; indexesRowItr++) {
        indexes[indexesRowItr] = readLine().split(' ').map(indexesTemp => parseInt(indexesTemp, 10));
    }
    const queriesCount = parseInt(readLine(), 10);

    let queries = [];

    for (let queriesItr = 0; queriesItr < queriesCount; queriesItr++) {
        const queriesItem = parseInt(readLine(), 10);
        queries.push(queriesItem);
    }

    let result = swapNodes(indexes, queries);

    ws.write(result.map(x => x.join(' ')).join("\n") + "\n");

    ws.end();
}
