def DFS(self, grid, i, j, visited, num_rows, num_cols):
    
    visited[i][j] = True
    
    if i-1 >= 0 and visited[i-1][j]==False and grid[i-1][j]=="1":
        self.DFS(grid, i-1, j, visited, num_rows, num_cols)
        
    if i+1 < num_rows and visited[i+1][j] == False and grid[i+1][j]=="1":
        self.DFS(grid, i+1, j, visited, num_rows, num_cols)
        
    if j-1 >= 0 and visited[i][j-1]==False and grid[i][j-1] == "1":
        self.DFS(grid, i, j-1, visited, num_rows, num_cols)
        
    if j+1 < num_cols and visited[i][j+1]==False and grid[i][j+1]=="1":
        self.DFS(grid, i, j+1, visited, num_rows, num_cols)
        
    return 








def numIslands(self, grid):
    """
    :type grid: List[List[str]]
    :rtype: int
    """
    
    if len(grid)==0:
        return 0
    
    num_rows = len(grid)
    num_cols = len(grid[0])
    
    
    ## visited matrix
    visited = [[False for i in range(num_cols)]for i in range(num_rows)]
    
    
    num_islands = 0
    
    for i in range(num_rows):
        for j in range(num_cols):
            if grid[i][j] == "1" and visited[i][j]==False:
                self.DFS(grid, i, j, visited, num_rows, num_cols)
                num_islands+=1
                
                
    return num_islands